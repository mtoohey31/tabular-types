import Lott.Elab.NotExistentialJudgement
import TabularTypeInterpreter.«F⊗⊕ω».Semantics.Term
import TabularTypeInterpreter.Semantics.InstanceEnvironment
import TabularTypeInterpreter.Semantics.Type.SubtypingAndElaboration

namespace TabularTypeInterpreter

open «F⊗⊕ω»

-- TODO: Consider simplifying tex by including versions of judgements with irrelevant components hidden.

judgement_syntax Γᵢ "; " Γc "; " Γ " ⊨ " ψ " ⇝ " E : Monotype.ConstraintSolvingAndElaboration

set_option maxHeartbeats 2000000 in
judgement Monotype.ConstraintSolvingAndElaboration where

ψ ⇝ x ∈ Γ
───────────────── «local»
Γᵢ; Γc; Γ ⊨ ψ ⇝ x

Γc; Γ ⊢ ρ : R κ ⇝ A
⊢ κ ⇝ K
Eₚ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A⟧). x$0
Eᵢ := Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A⟧). x$0
───────────────────────────────────────── containRefl
Γᵢ; Γc; Γ ⊨ ρ ≲(N) ρ ⇝ (Eₚ, Eᵢ)

Γᵢ; Γc; Γ ⊨ ρ₀ ≲(μ) ρ₁ ⇝ E
Γᵢ; Γc; Γ ⊨ ρ₁ ≲(μ) ρ₂ ⇝ F
Γc; Γ ⊢ ρ₀ : R κ ⇝ A₀
Γc; Γ ⊢ ρ₂ : R κ ⇝ A₂
⊢ κ ⇝ K
Eₚ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₂⟧). ⦅π 0 E⦆ [a$0] ⦅π 0 F⦆ [a$0] x$0
Eᵢ := Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A₀⟧). ⦅π 1 F⦆ [a$0] ⦅π 1 E⦆ [a$0] x$0
────────────────────────────────────────────────────────────────────── containTrans
Γᵢ; Γc; Γ ⊨ ρ₀ ≲(μ) ρ₂ ⇝ (Eₚ, Eᵢ)

Γᵢ; Γc; Γ ⊨ ρ₀ ≲(N) ρ₁ ⇝ E
Γc; Γ ⊢ μ : U ⇝ A
────────────────────────── containDecay
Γᵢ; Γc; Γ ⊨ ρ₀ ≲(μ) ρ₁ ⇝ E

Γc; Γ ⊢ ⟨</ ξ₀@i ▹ τ₀@i // i in [:m] /> </ : κ // b₀ />⟩ : R κ ⇝ A₀
Γc; Γ ⊢ ⟨</ ξ₁@j ▹ τ₁@j // j in [:n] /> </ : κ // b₁ />⟩ : R κ ⇝ A₁
Γc; Γ ⊢ ⟨</ ξ₀@i ▹ τ₀@i // i in [:m] />, </ ξ₁@j ▹ τ₁@j // j in [:n] /> </ : κ // b₀ && b₁ />⟩ : R κ ⇝ A₂
⊢ κ ⇝ K
</ Γc; Γ ⊢ τ₀@i : κ ⇝ B₀@i // i in [:m] />
</ Γc; Γ ⊢ τ₁@j : κ ⇝ B₁@j // j in [:n] />
Eₙ := Λ a : K ↦ *. λ xₗ : ⊗ (a$0 ⟦A₀⟧). λ xᵣ : ⊗ (a$0 ⟦A₁⟧). (</ π i xₗ$1 // i in [:m] />, </ π j xᵣ$0 // j in [:n] />)
Eₑ' := case x$0 {</ λ x : a$1 B₀@i. xₗ$3 ⦅ι i x$0⦆ // i in [:m] />, </ λ x : a$1 B₁@j. xᵣ$2 ⦅ι j x$0⦆ // j in [:n] />}
Eₑ := Λ a : K ↦ *. Λ aₜ : *. λ xₗ : (⊕ (a$1 ⟦A₀⟧)) → aₜ$0 . λ xᵣ : (⊕ (a$1 ⟦A₁⟧)) → aₜ$0 . λ x : ⊕ (a$1 ⟦A₂⟧). Eₑ'
Eₚₗ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₂⟧). (</ π i x$0 // i in [:m] />)
Eᵢₗ := Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A₀⟧). case x$0 {</ λ x : a$0 B₀@i. ι i x$0 // i in [:m] />}
Eₗ := (Eₚₗ, Eᵢₗ)
Eₚᵣ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₂⟧). (</ π (m + j) x$0 // j in [:n] />)
Eᵢᵣ := Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A₁⟧). case x$0 {</ λ x : a$0 B₁@j. ι (m + j) x$0 // j in [:n] />}
Eᵣ := (Eₚᵣ, Eᵢᵣ)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── concatConcrete
Γᵢ; Γc; Γ ⊨ ⟨</ ξ₀@i ▹ τ₀@i // i in [:m] /> </ : κ // b₀ />⟩ ⊙(N) ⟨</ ξ₁@j ▹ τ₁@j // j in [:n] /> </ : κ // b₁ />⟩ ~ ⟨</ ξ₀@i ▹ τ₀@i // i in [:m] />, </ ξ₁@j ▹ τ₁@j // j in [:n] /> </ : κ // b₀ && b₁ />⟩ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

Γc; Γ ⊢ ρ : R κ ⇝ A
⊢ κ ⇝ K
Eₙ := Λ a : K ↦ *. λ xₗ : ⊗ { }. λ xᵣ : ⊗ (a$0 ⟦A⟧). xᵣ$0
Eₑ := Λ a : K ↦ *. Λ aₜ : *. λ xₗ : (⊕ { }) → aₜ$0 . λ xᵣ : (⊕ (a$1 ⟦A⟧)) → aₜ$0 . xᵣ$0
Eₗ := (Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A⟧). (), Λ a : K ↦ *. λ x : ⊕ { }. case x$0 { })
Eᵣ := (Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A⟧). x$0, Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A⟧). x$0)
─────────────────────────────────────────────────────────────────────────────────────────────── concatEmptyL
Γᵢ; Γc; Γ ⊨ ⟨ : κ ⟩ ⊙(N) ρ ~ ρ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

Γc; Γ ⊢ ρ : R κ ⇝ A
⊢ κ ⇝ K
Eₙ := Λ a : K ↦ *. λ xₗ : ⊗ (a$0 ⟦A⟧). λ xᵣ : ⊗ { }. xₗ$1
Eₑ := Λ a : K ↦ *. Λ aₜ : *. λ xₗ : (⊕ (a$1 ⟦A⟧)) → aₜ$0 . λ xᵣ : (⊕ { }) → aₜ$0 . xₗ$1
Eₗ := (Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A⟧). x$0, Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A⟧). x$0)
Eᵣ := (Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A⟧). (), Λ a : K ↦ *. λ x : ⊕ { }. case x$0 { })
─────────────────────────────────────────────────────────────────────────────────────────────── concatEmptyR
Γᵢ; Γc; Γ ⊨ ρ ⊙(N) ⟨ : κ ⟩ ~ ρ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(C) ρ₁ ~ ρ₂ ⇝ E
Γc; Γ ⊢ ρ₀ : R κ ⇝ A₀
Γc; Γ ⊢ ρ₁ : R κ ⇝ A₁
⊢ κ ⇝ K
Eₙ := Λ a : K ↦ *. λ xₗ : ⊗ (a$0 ⟦A₁⟧). λ xᵣ : ⊗ (a$0 ⟦A₀⟧). ⦅⦅π 0 E⦆ [a$0] xᵣ$0⦆ xₗ$1
Eₑ := Λ a : K ↦ *. Λ aₜ : *. λ xₗ : (⊕ (a$1 ⟦A₁⟧)) → aₜ$0 . λ xᵣ : (⊕ (a$1 ⟦A₀⟧)) → aₜ$0 . ⦅⦅π 1 E⦆ [a$1] [aₜ$0] xᵣ$0⦆ xₗ$1
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── concatSwap
Γᵢ; Γc; Γ ⊨ ρ₁ ⊙(C) ρ₀ ~ ρ₂ ⇝ (Eₙ, Eₑ, π 3 E, π 2 E)

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₃ ⇝ E₀₁
Γᵢ; Γc; Γ ⊨ ρ₁ ⊙(μ) ρ₂ ~ ρ₄ ⇝ E₁₂
Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₄ ~ ρ₅ ⇝ E₀₄
Γc; Γ ⊢ ρ₀ : R κ ⇝ A₀
Γc; Γ ⊢ ρ₁ : R κ ⇝ A₁
Γc; Γ ⊢ ρ₂ : R κ ⇝ A₂
Γc; Γ ⊢ ρ₃ : R κ ⇝ A₃
Γc; Γ ⊢ ρ₅ : R κ ⇝ A₅
⊢ κ ⇝ K
Eₙᵣ := ⦅⦅π 0 E₁₂⦆ [a$0] ⦅⦅π 0 π 3 E₀₁⦆ [a$0] xₗ$1⦆⦆ xᵣ$0
Eₙ := Λ a : K ↦ *. λ xₗ : ⊗ (a$0 ⟦A₃⟧). λ xᵣ : ⊗ (a$0 ⟦A₂⟧). ⦅⦅π 0 E₀₄⦆ [a$0] ⦅⦅π 0 π 2 E₀₁⦆ [a$0] xₗ$1⦆⦆ Eₙᵣ
Eₑᵣ' := ⦅⦅π 1 E₁₂⦆ [a$1] [aₜ$0] ⦅λ x : ⊕ (a$1 ⟦A₁⟧). xₗ$2 ⦅⦅π 1 π 3 E₀₁⦆ [a$1] x$0⦆⦆⦆ xᵣ$0
Eₑ' := ⦅⦅π 1 E₀₄⦆ [a$1] [aₜ$0] ⦅λ x : ⊕ (a$1 ⟦A₀⟧). xₗ$2 ⦅⦅π 1 π 2 E₀₁⦆ [a$1] x$0⦆⦆⦆ Eₑᵣ'
Eₑ := Λ a : K ↦ *. Λ aₜ : *. λ xₗ : (⊕ (a$1 ⟦A₃⟧)) → aₜ$0 . λ xᵣ : (⊕ (a$1 ⟦A₂⟧)) → aₜ$0 . Eₑ'
Eₚₗ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₅⟧). ⦅⦅π 0 E₀₁⦆ [a$0] ⦅⦅π 0 π 2 E₀₄⦆ [a$0] x$0⦆⦆ ⦅⦅π 0 π 2 E₁₂⦆ [a$0] ⦅π 0 π 3 E₀₄⦆ [a$0] x$0⦆
Eᵢₗᵣ := λ x' : ⊕ (a$0 ⟦A₁⟧). ⦅π 1 π 3 E₀₄⦆ [a$0] ⦅⦅π 1 π 2 E₁₂⦆ [a$0] x'$0⦆
Eᵢₗ := Λ a : K ↦ *. ⦅⦅π 1 E₀₁⦆ [a$0] [⊕ (a$0 ⟦A₅⟧)] ⦅⦅π 1 π 2 E₀₄⦆ [a$0]⦆⦆ Eᵢₗᵣ
Eₗ := (Eₚₗ, Eᵢₗ)
Eₚᵣ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₅⟧). ⦅π 0 π 3 E₁₂⦆ [a$0] ⦅π 0 π 3 E₀₄⦆ [a$0] x$0
Eᵢᵣ := Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A₂⟧). ⦅π 1 π 3 E₀₄⦆ [a$0] ⦅π 1 π 3 E₁₂⦆ [a$0] x$0
Eᵣ := (Eₚᵣ, Eᵢᵣ)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── concatAssocL
Γᵢ; Γc; Γ ⊨ ρ₃ ⊙(μ) ρ₂ ~ ρ₅ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₃ ⇝ E₀₁
Γᵢ; Γc; Γ ⊨ ρ₁ ⊙(μ) ρ₂ ~ ρ₄ ⇝ E₁₂
Γᵢ; Γc; Γ ⊨ ρ₃ ⊙(μ) ρ₂ ~ ρ₅ ⇝ E₃₂
Γc; Γ ⊢ ρ₀ : R κ ⇝ A₀
Γc; Γ ⊢ ρ₁ : R κ ⇝ A₁
Γc; Γ ⊢ ρ₂ : R κ ⇝ A₂
Γc; Γ ⊢ ρ₄ : R κ ⇝ A₄
Γc; Γ ⊢ ρ₅ : R κ ⇝ A₅
⊢ κ ⇝ K
Eₙₗ := ⦅⦅π 0 E₀₁⦆ [a$0] xₗ$1⦆ ⦅⦅π 0 π 2 E₁₂⦆ [a$0] xᵣ$0⦆
Eₙ := Λ a : K ↦ *. λ xₗ : ⊗ (a$0 ⟦A₀⟧). λ xᵣ : ⊗ (a$0 ⟦A₄⟧). ⦅⦅π 0 E₃₂⦆ [a$0] Eₙₗ⦆ ⦅⦅π 0 π 3 E₁₂⦆ [a$0] xᵣ$0⦆
Eₑₗ' := ⦅⦅π 1 E₀₁⦆ [a$1] [aₜ$0] xₗ$1⦆ ⦅λ x : ⊕ (a$1 ⟦A₁⟧). xᵣ$1 ⦅⦅π 1 π 2 E₁₂⦆ [a$1] x$0⦆⦆
Eₑ' := ⦅⦅π 1 E₃₂⦆ [a$1] [aₜ$0] Eₑₗ'⦆ ⦅λ x : ⊕ (a$1 ⟦A₂⟧). xᵣ$1 ⦅⦅π 1 π 3 E₁₂⦆ [a$1] x$0⦆⦆
Eₑ := Λ a : K ↦ *. Λ aₜ : *. λ xₗ : (⊕ (a$1 ⟦A₀⟧)) → aₜ$0 . λ xᵣ : (⊕ (a$1 ⟦A₄⟧)) → aₜ$0 . Eₑ'
Eₗₚ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₅⟧). ⦅π 0 π 2 E₀₁⦆ [a$0] ⦅π 0 π 2 E₃₂⦆ [a$0] x$0
Eₗᵢ := Λ a : K ↦ *. λ x : ⊕ (a$0 ⟦A₀⟧). ⦅π 1 π 2 E₃₂⦆ [a$0] ⦅π 1 π 2 E₀₁⦆ [a$0] x$0
Eₗ := (Eₗₚ, Eₗᵢ)
Eᵣₚ := Λ a : K ↦ *. λ x : ⊗ (a$0 ⟦A₅⟧). ⦅⦅π 0 E₁₂⦆ [a$0] ⦅⦅π 0 π 3 E₀₁⦆ [a$0] ⦅π 0 π 2 E₃₂⦆ [a$0] x$0⦆⦆ ⦅⦅π 0 π 3 E₃₂⦆ [a$0] x$0⦆
Eᵣᵢₗ := λ x' : ⊕ (a$0 ⟦A₁⟧). ⦅π 1 π 2 E₃₂⦆ [a$0] ⦅⦅π 1 π 3 E₀₁⦆ [a$0] x'$0⦆
Eᵣᵢ := Λ a : K ↦ *. ⦅⦅⦅π 1 E₁₂⦆ [a$0] [⊕ (a$0 ⟦A₅⟧)] Eᵣᵢₗ⦆ ⦅⦅π 1 π 3 E₃₂⦆ [a$0]⦆⦆
Eᵣ := (Eᵣₚ, Eᵣᵢ)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── concatAssocR
Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₄ ~ ρ₅ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(N) ρ₁ ~ ρ₂ ⇝ E
Γc; Γ ⊢ μ : U ⇝ A
─────────────────────────────── concatDecay
Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₂ ⇝ E

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₂ ⇝ E
─────────────────────────────── concatContainL
Γᵢ; Γc; Γ ⊨ ρ₀ ≲(μ) ρ₂ ⇝ π 2 E

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₂ ⇝ E
─────────────────────────────── concatContainR
Γᵢ; Γc; Γ ⊨ ρ₁ ≲(μ) ρ₂ ⇝ π 3 E

Γᵢ; Γc; Γ ⊨ ρ₀ ≲(μ) ρ₁ ⇝ E
Γc; Γ ⊢ ρ₀ : R κ₀ ⇝ B
∀ a ∉ I, Γc; Γ, a : κ₀ ⊢ τ^a : κ₁ ⇝ A^a
⊢ κ₀ ⇝ K₀
⊢ κ₁ ⇝ K₁
Eₚ := Λ a : K₁ ↦ *. ⦅π 0 E⦆ [λ aᵢ : K₀. a$1 A]
Eᵢ := Λ a : K₁ ↦ *. ⦅π 1 E⦆ [λ aᵢ : K₀. a$1 A]
─────────────────────────────────────────────────────────────────────────── liftContain (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ (Lift (λ a : κ₀. τ) ρ₀) ≲(μ) (Lift (λ a : κ₀. τ) ρ₁) ⇝ (Eₚ, Eᵢ)

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₂ ⇝ E
Γc; Γ ⊢ ρ₀ : R κ₀ ⇝ B
∀ a ∉ I, Γc; Γ, a : κ₀ ⊢ τ^a : κ₁ ⇝ A^a
⊢ κ₀ ⇝ K₀
⊢ κ₁ ⇝ K₁
Eₙ := Λ a : K₁ ↦ *. ⦅π 0 E⦆ [λ aᵢ : K₀. a$1 A]
Eₑ := Λ a : K₁ ↦ *. ⦅π 1 E⦆ [λ aᵢ : K₀. a$1 A]
Eₗ := (Λ a : K₁ ↦ *. ⦅π 0 π 2 E⦆ [λ aᵢ : K₀. a$1 A], Λ a : K₁ ↦ *. ⦅π 1 π 2 E⦆ [λ aᵢ : K₀. a$1 A])
Eᵣ := (Λ a : K₁ ↦ *. ⦅π 0 π 3 E⦆ [λ aᵢ : K₀. a$1 A], Λ a : K₁ ↦ *. ⦅π 1 π 3 E⦆ [λ aᵢ : K₀. a$1 A])
───────────────────────────────────────────────────────────────────────────────────────────────────────────── liftConcat (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ (Lift (λ a : κ₀. τ) ρ₀) ⊙(μ) (Lift (λ a : κ₀. τ) ρ₁) ~ (Lift (λ a : κ₀. τ) ρ₂) ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

(∀ </ a@k : κ@k // k in [:o] notex />. </ ψ@j ⇝ x@j // j in [:l] notex /> ⇒ TC τ₀) ↦ E; </ Eₛ@i // i in [:n] notex /> ∈ Γᵢ
</ Γc; Γ ⊢ τ₁@k : κ@k ⇝ B@k // k in [:o] notex />
</ Γᵢ; Γc; Γ ⊨ ψ@j^^^^τ₁@@k#o/a ⇝ F@j // j in [:l] notex />
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── TCInst {TC}
Γᵢ; Γc; Γ ⊨ TC τ₀^^^^τ₁@@k#o/a ⇝ (E^^^^B@@k#o/a^^^^F@@j#l/x, </ Eₛ@i^^^^B@@k#o/a^^^^F@@j#l/x // i in [:n] notex />)

(</ TCₛ@j a ⇝ Aₛ@j // j in [:n] /> ⇒ TC a : κ) ↦ m : σ ⇝ A ∈ Γc
Γᵢ; Γc; Γ ⊨ TC τ ⇝ E
i ∈ [:n]
─────────────────────────────────────────────────────────────── TCSuper {TC}
Γᵢ; Γc; Γ ⊨ TCₛ@i τ ⇝ π (1 + i) E

∀ a ∉ I, Γc; Γ, a : κ ⊢ ψ^a : C ⇝ A^a
───────────────────────────────────────── allEmpty (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ⟨ : κ ⟩ ⇝ ()

Γᵢ; Γc; Γ ⊨ ψ^^τ/a ⇝ E
∀ a ∉ I, Γc; Γ, a : κ ⊢ ψ^a : C ⇝ A^a
Γc; Γ ⊢ ξ : L ⇝ B₀
Γc; Γ ⊢ τ : κ ⇝ B₁
────────────────────────────────────────── allSingletonIntro (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ⟨ξ ▹ τ⟩ ⇝ (E)

Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ⟨ξ ▹ τ⟩ ⇝ E
──────────────────────────────────────── allSingletonElim
Γᵢ; Γc; Γ ⊨ ψ^^τ/a ⇝ π 0 E

Γᵢ; Γc; Γ ⊨ ρ₀ ≲(μ) ρ₁ ⇝ F
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ρ₁ ⇝ E
∀ a ∉ I, Γc; Γ, a : κ ⊢ ψ^a : C ⇝ A^a
⊢ κ ⇝ K
──────────────────────────────────────────────────────── allContain (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ρ₀ ⇝ ⦅π 0 F⦆ [λ a : K. A] E

Γᵢ; Γc; Γ ⊨ ρ₀ ⊙(μ) ρ₁ ~ ρ₂ ⇝ F
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ρ₀ ⇝ E₀
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ρ₁ ⇝ E₁
∀ a ∉ I, Γc; Γ, a : κ ⊢ ψ^a : C ⇝ A^a
⊢ κ ⇝ K
────────────────────────────────────────────────────────────── allConcat (I  : List TypeVarId)
Γᵢ; Γc; Γ ⊨ All (λ a : κ. ψ) ρ₂ ⇝ ⦅⦅π 0 F⦆ [λ a : K. A] E₀⦆ E₁

-- TODO: Mention that indConcat and such were omitted since it would require total type list concat
-- in the target and should become obsolete after future work figures out how to deal with
-- constraint totality properly.

</ Γc; Γ ⊢ τ@i : κ ⇝ A@i // i in [:n] />
</ Γc; Γ ⊢ ℓ@i : L ⇝ B@i // i in [:n] />
⊢ κ ⇝ K
∀ aₗ ∉ I₀, ∀ aₜ ∉ aₗ :: I₀, ∀ aₚ ∉ aₜ :: aₗ :: I₀, ∀ aᵢ ∉ aₚ :: aₜ :: aₗ :: I₀, ∀ aₙ ∉ aᵢ :: aₚ :: aₜ :: aₗ :: I₀, Γc; Γ, aₗ : L, aₜ : κ, aₚ : R κ, aᵢ : R κ, aₙ : R κ ⊢ aₚ ⊙(N) ⟨aₗ ▹ aₜ⟩ ~ aᵢ : C ⇝ Bₗ^aₗ#4^aₜ#3^aₚ#2^aᵢ#1^aₙ
∀ aᵢ ∉ I₁, ∀ aₙ ∉ aᵢ :: I₁, Γc; Γ, aᵢ : R κ, aₙ : R κ ⊢ aᵢ ⊙(N) aₙ ~ ⟨</ ℓ@i ▹ τ@i // i in [:n] /> </ : κ // b />⟩ : C ⇝ Bᵣ^aᵢ#1^aₙ
Aₛ := ∀ aₗ : *. ∀ aₜ : K. ∀ aₚ : L K. ∀ aᵢ : L K. ∀ aₙ : L K. Bₗ → Bᵣ → (⊗ { }) → (aₘ$5 aₚ$2) → aₘ$5 aᵢ$1
</ Γᵢ; Γc; Γ ⊨ ⟨</ ℓ@j ▹ τ@j // j in [:i] /> : κ⟩ ⊙(N) ⟨ℓ@i ▹ τ@i⟩ ~ ⟨</ ℓ@k ▹ τ@k // k in [:i+1] />⟩ ⇝ Eᵣ@i // i in [:n] />
</ Γᵢ; Γc; Γ ⊨ ⟨</ ℓ@j ▹ τ@j // j in [:i+1] />⟩ ⊙(N) ⟨</ ℓ@k ▹ τ@k // k in [i+1:n] /> : κ⟩ ~ ⟨</ ℓ@l ▹ τ@l // l in [:n] /> </ : κ // b />⟩ ⇝ Eₗ@i // i in [:n] />
E' := ! </ ⦅⦅xₛ$1 [⊗ { }] [A@i] [{</ A@j // j in [:i] />}] [{</ A@k // k in [:i+1] />}] [{</ A@l // l in [i+1:n] />}] Eᵣ@i⦆ Eₗ@i⦆ () // i in [:n] /> xᵢ$0
E := Λ aₘ : (L K) ↦ *. λ xₛ : Aₛ. λ xᵢ : a$0 { }. E'
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ind (comment := "where the comprehension in E's definition is repeated application") (I₀ I₁ : List TypeVarId)
Γᵢ; Γc; Γ ⊨ Ind ⟨</ ℓ@i ▹ τ@i // i in [:n] /> </ : κ // b />⟩ ⇝ E

∀ a ∉ I, Γc; Γ, a : κ ⊢ τ^a : * ⇝ A^a
Eₙ := Λ a : * ↦ *. λ xₗ : ⊗ { }. λ xᵣ : ⊗ { }. ()
Eₑ := Λ a : * ↦ *. Λ aₜ : *. λ xₗ : (⊕ { }) → aₜ$0 . λ xᵣ : (⊕ { }) → aₜ$0 . xᵣ$0
Eₗᵣ := (Λ a : * ↦ *. λ x : ⊗ { }. (), Λ a : * ↦ *. λ x : ⊕ { }. x$0)
──────────────────────────────────────────────────────────────────────────────── splitEmpty (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ) ⟨ : κ ⟩ ⊙' ⟨ : * ⟩ ~ ⟨ : * ⟩ ⇝ (Eₙ, Eₑ, Eₗᵣ, Eₗᵣ)

-- TODO: Talk about subtyping considerations in the paper.

∀ a ∉ I, Γc; Γ, a : κ ⊢ τ₀^a : * ⇝ A^a
Γc; Γ ⊢ τ₁ : κ ⇝ B
Γc; Γ ⊢ ξ : L ⇝ B'
Eₙ := Λ a : * ↦ *. λ xₗ : ⊗ {a$0 A^^B/a}. λ xᵣ : ⊗ { }. xₗ$1
Eₑ := Λ a : * ↦ *. Λ aₜ : *. λ xₗ : (⊕ {a$1 A^^B/a}) → aₜ$0 . λ xᵣ : (⊕ { }) → aₜ$0 . xₗ$1
Eₗ := (Λ a : * ↦ *. λ x : ⊗ {a$0 A^^B/a}. x$0, Λ a : * ↦ *. λ x : ⊕ {a$0 A^^B/a}. x$0)
Eᵣ := (Λ a : * ↦ *. λ x : ⊗ {a$0 A^^B/a}. (), Λ a : * ↦ *. λ x : ⊕ { }. case x$0 { })
────────────────────────────────────────────────────────────────────────────────────────── splitSingletonMatch (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ₀) ⟨ξ ▹ τ₁⟩ ⊙' ⟨ : * ⟩ ~ ⟨ξ ▹ τ₀^^τ₁/a⟩ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

∄ τ₂ F, Γc; Γ ⊢ τ₁ <: τ₀^^τ₂/a ⇝ F
∀ a ∉ I, Γc; Γ, a : κ ⊢ τ₀^a : * ⇝ A^a
Γc; Γ ⊢ τ₁ : * ⇝ B
Γc; Γ ⊢ ξ : L ⇝ B'
Eₙ := Λ a : * ↦ *. λ xₗ : ⊗ { }. λ xᵣ : ⊗ {a$0 B}. xᵣ$0
Eₑ := Λ a : * ↦ *. Λ aₜ : *. λ xₗ : (⊕ { }) → aₜ$0 . λ xᵣ : (⊕ {a$1 B}) → aₜ$0 . xᵣ$0
Eₗ := (Λ a : * ↦ *. λ x : ⊗ {a$0 B}. (), Λ a : * ↦ *. λ x : ⊕ { }. case x$0 { })
Eᵣ := (Λ a : * ↦ *. λ x : ⊗ {a$0 B}. x$0, Λ a : * ↦ *. λ x : ⊕ {a$0 B}. x$0)
───────────────────────────────────────────────────────────────────────────────────── splitSingletonRest (I : List TypeVarId)
Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ₀) ⟨ : κ ⟩ ⊙' ⟨ξ ▹ τ₁⟩ ~ ⟨ξ ▹ τ₁⟩ ⇝ (Eₙ, Eₑ, Eₗ, Eᵣ)

Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ) ρ₀ ⊙' ρ₁ ~ ρ₂ ⇝ Eₗ
Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ) ρ₃ ⊙' ρ₄ ~ ρ₅ ⇝ Eᵣ
Γᵢ; Γc; Γ ⊨ (Lift (λ a : κ. τ) ρ₀) ⊙(C) (Lift (λ a : κ. τ) ρ₃) ~ (Lift (λ a : κ. τ) ρ₆) ⇝ E₆
Γᵢ; Γc; Γ ⊨ ρ₁ ⊙(C) ρ₄ ~ ρ₇ ⇝ E₇
Γᵢ; Γc; Γ ⊨ ρ₂ ⊙(C) ρ₅ ~ ρ₈ ⇝ E₈
Γᵢ; Γc; Γ ⊨ (Lift (λ a : κ. τ) ρ₆) ⊙(C) ρ₇ ~ ρ₈ ⇝ E
──────────────────────────────────────────────────────────────────────────────────────────── splitPiecewise
Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ) ρ₆ ⊙' ρ₇ ~ ρ₈ ⇝ E

Γᵢ; Γc; Γ ⊨ Split (λ a : κ. τ) ρ₀ ⊙' ρ₁ ~ ρ₂ ⇝ E
─────────────────────────────────────────────────── splitConcat
Γᵢ; Γc; Γ ⊨ (Lift (λ a : κ. τ) ρ₀) ⊙(C) ρ₁ ~ ρ₂ ⇝ E

end TabularTypeInterpreter
